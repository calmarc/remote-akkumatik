; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Remote Akkumatik Display"
#define MyAppVersion "0.5"
#define MyAppURL "http://www.calmar.ws/akkumatik/"
#define MyAppExeName "remote_akkumatik.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{57C7D8F6-0E9A-4E64-BC30-EEEB09A30ADC}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName=Remote Akkumatik Display
AllowNoIcons=yes
LicenseFile=C:\Dokumente und Einstellungen\calmar\Desktop\calmarc-remote-akkumatik\COPYING
OutputDir=C:\Dokumente und Einstellungen\calmar\Desktop
OutputBaseFilename=remote-akkumatik-display-install
SetupIconFile=C:\Dokumente und Einstellungen\calmar\Desktop\calmarc-remote-akkumatik\ra.ico
Compression=lzma
SolidCompression=yes
ChangesEnvironment=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "dutch"; MessagesFile: "compiler:Languages\Dutch.isl"
Name: "french"; MessagesFile: "compiler:Languages\French.isl"
Name: "german"; MessagesFile: "compiler:Languages\German.isl"
Name: "italian"; MessagesFile: "compiler:Languages\Italian.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
Source: "C:\Dokumente und Einstellungen\calmar\Desktop\calmarc-remote-akkumatik\dist\remote_akkumatik.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Dokumente und Einstellungen\calmar\Desktop\calmarc-remote-akkumatik\dist\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,...}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, "&", "&&")}}"; Flags: nowait postinstall skipifsilent

[Registry]
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}\gnuplot\bin"; Check: NeedsAddPath('{app}\gnuplot\bin')

[Code]
function NeedsAddPath(Param: string): Boolean;
var
  OrigPath: string;
begin
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE, 
       'SYSTEM\CurrentControlSet\Control\Session Manager\Environment','Path', OrigPath)
  then begin
    Result := True;
    exit;
  end;
  // look for the path with leading and trailing semicolon
  // Pos() returns 0 if not found
  Result := Pos(';' + ExpandConstant(Param) + ';', ';' + OrigPath + ';') = 0;
end;

les]
Source: "compiler:Examples\MyProg.exe"; DestDir: "{app}";
 
[Code]
// Registrypfad zu den Umgebungsvariablen des Systems
const
 SystemEnvironmentVarsPath = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';
 
function UpdateSystemPathVariable: boolean;
var
 PathVariable,
 tmp       : string;
begin
 // Originalwert auslesen, ...
 Result      := RegQueryStringValue(HKLM,SystemEnvironmentVarsPath,'Path',PathVariable);
 tmp       := ExpandConstant('{app}');
 
 // ... & prüfen, ob der Pfad dieses Setups evtl. schon drin
 // steht
 if(Result) and (Pos(UpperCase(tmp),UpperCase(PathVariable)) = 0) then
 begin
  // ggf. ein Semikolon anhängen, ...
  if PathVariable[length(PathVariable)] <> ';' then
   PathVariable := PathVariable + ';';
 
  // ... & das Anwendungsverzeichnis anhängen, ...
  PathVariable  := PathVariable + tmp;
 
  // ... & den neuen Wert in die Registry schreiben
  Result     := RegWriteStringValue(HKLM,SystemEnvironmentVarsPath,'Path',PathVariable);
 end;
end;
 
function ResetSystemPathVariable: boolean;
var
 PathVariable,
 tmp       : string;
 PathIndex    : integer;
begin
 // Originalwert der PATH-Variablen auslesen
 Result      := RegQueryStringValue(HKLM,SystemEnvironmentVarsPath,'Path',PathVariable);
 
 if Result then
 begin
  // Prüfen, ob der Ordner dieses Setups drin steh
  tmp      := ExpandConstant('{app}');
  PathIndex   := Pos(UpperCase(tmp),UpperCase(PathVariable));
 
  if PathIndex > 0 then
  begin
   // Den Pfad der Anwendung entfernen, ...
   Delete(PathVariable,PathIndex,length(tmp));
   
   // ... & den neuen Wert in die Registry schreiben
   Result    := RegWriteStringValue(HKLM,SystemEnvironmentVarsPath,'Path',PathVariable);
  end;
 end;
end;
 
procedure CurStepChanged(CurrentStep: TSetupStep);
begin
 // Nach der Installation versuchen, die PATH-Variable zu aktualisieren
 if CurrentStep = ssPostInstall then
 begin
 // Klappt das nicht, Fehlermeldung anzeigen
  if not UpdateSystemPathVariable then
   MsgBox('Fehler beim Eintragen des Pfades in die PATH-Umgebungsvariable.' + #13#10 +
    'Bitte tragen Sie den Pfad "' + ExpandConstant('{app}') + '" manuell ein.',
    mbError,MB_OK);
 end;
end;
 
procedure CurUninstallStepChanged(CurrentStep: TUninstallStep);
begin
 // Während der Deinstallation versuchen, die PATH-Variable zurückzusetzen
 if CurrentStep = usUninstall then
 begin
 // Klappt das nicht, Fehlermeldung anzeigen
  if not ResetSystemPathVariable then
   MsgBox('Fehler beim Zurücksetzen der PATH-Umgebungsvariable.' + #13#10 +
    'Bitte entfernen Sie den Pfad "' + ExpandConstant('{app}') + '" manuell.',
    mbError,MB_OK);
 end
end; 
